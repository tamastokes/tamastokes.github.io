---
layout: post
title:  "Learning about good solos from crap solos"
date:   2023-01-30 15:04:00 +0100
categories:
---
A few years ago I was sitting in a jazz cafe, when a group of young saxophone players started a jam session.  The players were young and seemingly at the beginning of their studies, so most of their solos were obviously not very good.  If there's live music around, I usually can't help focussing on it, so I stopped reading and took my full attention to them.  After a while, I recognized something interesting: while usually it's quite difficult to explain why a good solo is good, it's almost always very obvious why a crap solo is crap.  Moreover, as crap solos often lack (or conversely, over-exaggerate) some important attributes of good solos, you can actually learn a lot about good solos if you listen to some crap solos.  If you want to understand Coltrane better, go to your local jazz club more often.

What reminded me of this story is the book "SQL Antipatterns" by Bill Karwin.  I think this is a fantastic book, and one reason I love it is because he presents best practices (good solos) through the lense of anti-patterns (crap solos).  And similarly to jazz, it's much easier to explain (from the writer's point of you) and hence understand (from the reader's point of you) the consequences of bad choices than the non-consequences of good choices.

But the analogy with saxopohon solos stops working at this point: while we usually expect a good jazz solo to be creative and surprising, most solutions recommended by the book are actually quite boring.  This really made me think, but it actually makes a lot of sense: if the solution for any technical problem is not intuitive, and you need to be creative to figure it out yourself, then there must be a design problem somewhere else.  Often exactly this unintuitive nature of the creative solutions is what make people gravitate towards anti-patterns.  Looks like the opposite of a crap solo is an exciting solo, whereas the opposite of an anti-pattern is a boring solo.

OK, but what about the well-known design patterns (Factory, Visitor, etc.) we were all tought, many of which are actually quite unintuitive?  I like to see them as workarounds.  Workarounds for some limitations of the progamming paradigm (e.g. OOP) or the programming language (e.g. C++) for which these patterns were created for.  (Don't throw your Gang of Four book to the waste-basket just yet though: still these are the programming languages and paradigms we use most often these days, therefore we'll keep running across scenarios for which these design patterns are still considered best practices.)

Studying these design patterns, comparing patterns recommended for different languages and paradigms help better understand some of the limitations, gaps, trade-offs and other consequences of programming language design choices.  (Are these, in a sense, the anti-patterns of programming language design?)

For example, people often use the Visitor pattern as a workaround for double dispatch polymorphism, as most OOP languages (C++, Java, etc.) only support single dispatch polymorphism.  Whereas in Julia, which supports double dispatch, you don't need this particular boilerplate.  The story of the Singleton pattern, originally listed as a design pattern in the GoF book but now widely seen as an anti-pattern because of its incompatibility with unit testing practices (mocking), also reveals a lot about how priorities in software development has changed in the last 20 years.

Be careful with the comparisions though: the fact that  multiple competing programming languages and paradigms co-exist should remind us [that it's all about the trade-offs](https://tamastokes.github.io/2023/01/10/productive-debates-discover-tradeoffs.html).  For example, RAII is a C++ specific pattern, garbage collected languages don't need it.  (Until they realized they actually do and introduced the _using_ / _with_ keyword...)  But garbage collection is also a trade-off itself: trade control for simplicity, which is [sometimes maybe good, sometimes maybe shit](https://www.youtube.com/watch?v=QJHUbtR0yI8).
